// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: require_trailing_commas

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:photos/src/rust/frb_generated.dart';

// These functions are ignored because they are not marked as `pub`: `ensure_capacity`, `save_index`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VectorDB>>
abstract class VectorDb implements RustOpaqueInterface {
  Future<void> addVector({required BigInt key, required List<double> vector});

  Future<void> bulkAddVectors(
      {required Uint64List keys, required List<Float32List> vectors});

  Future<List<Float32List>> bulkGetVectors({required Uint64List keys});

  Future<BigInt> bulkRemoveVectors({required Uint64List keys});

  Future<(Uint64List, List<Uint64List>, List<Float32List>)> bulkSearchKeys(
      {required Uint64List potentialKeys,
      required BigInt count,
      required bool exact});

  Future<(List<Uint64List>, List<Float32List>)> bulkSearchVectors(
      {required List<Float32List> queries,
      required BigInt count,
      required bool exact});

  /// Check if a vector with the given key exists in the index.
  /// `true` if the index contains the vector with the given key, `false` otherwise.
  Future<bool> containsVector({required BigInt key});

  Future<void> deleteIndex();

  Future<(BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)>
      getIndexStats();

  Future<Float32List> getVector({required BigInt key});

  factory VectorDb({required String filePath, required BigInt dimensions}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbNew(
          filePath: filePath, dimensions: dimensions);

  Future<BigInt> removeVector({required BigInt key});

  Future<void> resetIndex();

  Future<(Uint64List, Float32List)> searchVectors(
      {required List<double> query,
      required BigInt count,
      required bool exact});
}
