// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: require_trailing_commas

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:photos/src/rust/api/simple.dart';
import 'package:photos/src/rust/api/usearch_api.dart';
import 'package:photos/src/rust/frb_generated.dart';
import 'package:photos/src/rust/frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1360671619;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_photos',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiUsearchApiVectorDbAddVector(
      {required VectorDb that,
      required BigInt key,
      required List<double> vector});

  Future<void> crateApiUsearchApiVectorDbBulkAddVectors(
      {required VectorDb that,
      required Uint64List keys,
      required List<Float32List> vectors});

  Future<List<Float32List>> crateApiUsearchApiVectorDbBulkGetVectors(
      {required VectorDb that, required Uint64List keys});

  Future<BigInt> crateApiUsearchApiVectorDbBulkRemoveVectors(
      {required VectorDb that, required Uint64List keys});

  Future<(Uint64List, List<Uint64List>, List<Float32List>)>
      crateApiUsearchApiVectorDbBulkSearchKeys(
          {required VectorDb that,
          required Uint64List potentialKeys,
          required BigInt count,
          required bool exact});

  Future<(List<Uint64List>, List<Float32List>)>
      crateApiUsearchApiVectorDbBulkSearchVectors(
          {required VectorDb that,
          required List<Float32List> queries,
          required BigInt count,
          required bool exact});

  Future<bool> crateApiUsearchApiVectorDbContainsVector(
      {required VectorDb that, required BigInt key});

  Future<void> crateApiUsearchApiVectorDbDeleteIndex({required VectorDb that});

  Future<(BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)>
      crateApiUsearchApiVectorDbGetIndexStats({required VectorDb that});

  Future<Float32List> crateApiUsearchApiVectorDbGetVector(
      {required VectorDb that, required BigInt key});

  VectorDb crateApiUsearchApiVectorDbNew(
      {required String filePath, required BigInt dimensions});

  Future<BigInt> crateApiUsearchApiVectorDbRemoveVector(
      {required VectorDb that, required BigInt key});

  Future<void> crateApiUsearchApiVectorDbResetIndex({required VectorDb that});

  Future<(Uint64List, Float32List)> crateApiUsearchApiVectorDbSearchVectors(
      {required VectorDb that,
      required List<double> query,
      required BigInt count,
      required bool exact});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VectorDb;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VectorDb;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VectorDbPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiUsearchApiVectorDbAddVector(
      {required VectorDb that,
      required BigInt key,
      required List<double> vector}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_u_64(key, serializer);
        sse_encode_list_prim_f_32_loose(vector, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbAddVectorConstMeta,
      argValues: [that, key, vector],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbAddVectorConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_add_vector",
        argNames: ["that", "key", "vector"],
      );

  @override
  Future<void> crateApiUsearchApiVectorDbBulkAddVectors(
      {required VectorDb that,
      required Uint64List keys,
      required List<Float32List> vectors}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_prim_u_64_strict(keys, serializer);
        sse_encode_list_list_prim_f_32_strict(vectors, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbBulkAddVectorsConstMeta,
      argValues: [that, keys, vectors],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbBulkAddVectorsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_bulk_add_vectors",
        argNames: ["that", "keys", "vectors"],
      );

  @override
  Future<List<Float32List>> crateApiUsearchApiVectorDbBulkGetVectors(
      {required VectorDb that, required Uint64List keys}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_prim_u_64_strict(keys, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbBulkGetVectorsConstMeta,
      argValues: [that, keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbBulkGetVectorsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_bulk_get_vectors",
        argNames: ["that", "keys"],
      );

  @override
  Future<BigInt> crateApiUsearchApiVectorDbBulkRemoveVectors(
      {required VectorDb that, required Uint64List keys}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_prim_u_64_strict(keys, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbBulkRemoveVectorsConstMeta,
      argValues: [that, keys],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbBulkRemoveVectorsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_bulk_remove_vectors",
        argNames: ["that", "keys"],
      );

  @override
  Future<(Uint64List, List<Uint64List>, List<Float32List>)>
      crateApiUsearchApiVectorDbBulkSearchKeys(
          {required VectorDb that,
          required Uint64List potentialKeys,
          required BigInt count,
          required bool exact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_prim_u_64_strict(potentialKeys, serializer);
        sse_encode_usize(count, serializer);
        sse_encode_bool(exact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_prim_u_64_strict_list_list_prim_u_64_strict_list_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbBulkSearchKeysConstMeta,
      argValues: [that, potentialKeys, count, exact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbBulkSearchKeysConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_bulk_search_keys",
        argNames: ["that", "potentialKeys", "count", "exact"],
      );

  @override
  Future<(List<Uint64List>, List<Float32List>)>
      crateApiUsearchApiVectorDbBulkSearchVectors(
          {required VectorDb that,
          required List<Float32List> queries,
          required BigInt count,
          required bool exact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_list_prim_f_32_strict(queries, serializer);
        sse_encode_usize(count, serializer);
        sse_encode_bool(exact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_list_prim_u_64_strict_list_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbBulkSearchVectorsConstMeta,
      argValues: [that, queries, count, exact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbBulkSearchVectorsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_bulk_search_vectors",
        argNames: ["that", "queries", "count", "exact"],
      );

  @override
  Future<bool> crateApiUsearchApiVectorDbContainsVector(
      {required VectorDb that, required BigInt key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_u_64(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbContainsVectorConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbContainsVectorConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_contains_vector",
        argNames: ["that", "key"],
      );

  @override
  Future<void> crateApiUsearchApiVectorDbDeleteIndex({required VectorDb that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbDeleteIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbDeleteIndexConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_delete_index",
        argNames: ["that"],
      );

  @override
  Future<(BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)>
      crateApiUsearchApiVectorDbGetIndexStats({required VectorDb that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_usize_usize_usize_usize_usize_usize_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbGetIndexStatsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbGetIndexStatsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_get_index_stats",
        argNames: ["that"],
      );

  @override
  Future<Float32List> crateApiUsearchApiVectorDbGetVector(
      {required VectorDb that, required BigInt key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_u_64(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbGetVectorConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbGetVectorConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_get_vector",
        argNames: ["that", "key"],
      );

  @override
  VectorDb crateApiUsearchApiVectorDbNew(
      {required String filePath, required BigInt dimensions}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        sse_encode_usize(dimensions, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbNewConstMeta,
      argValues: [filePath, dimensions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbNewConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_new",
        argNames: ["filePath", "dimensions"],
      );

  @override
  Future<BigInt> crateApiUsearchApiVectorDbRemoveVector(
      {required VectorDb that, required BigInt key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_u_64(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbRemoveVectorConstMeta,
      argValues: [that, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbRemoveVectorConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_remove_vector",
        argNames: ["that", "key"],
      );

  @override
  Future<void> crateApiUsearchApiVectorDbResetIndex({required VectorDb that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbResetIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbResetIndexConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_reset_index",
        argNames: ["that"],
      );

  @override
  Future<(Uint64List, Float32List)> crateApiUsearchApiVectorDbSearchVectors(
      {required VectorDb that,
      required List<double> query,
      required BigInt count,
      required bool exact}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
            that, serializer);
        sse_encode_list_prim_f_32_loose(query, serializer);
        sse_encode_usize(count, serializer);
        sse_encode_bool(exact, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_prim_u_64_strict_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsearchApiVectorDbSearchVectorsConstMeta,
      argValues: [that, query, count, exact],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsearchApiVectorDbSearchVectorsConstMeta =>
      const TaskConstMeta(
        debugName: "VectorDb_search_vectors",
        argNames: ["that", "query", "count", "exact"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VectorDb => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VectorDb => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB;

  @protected
  VectorDb
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VectorDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VectorDb
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VectorDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VectorDb
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VectorDbImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  List<Float32List> dco_decode_list_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_prim_f_32_strict)
        .toList();
  }

  @protected
  List<Uint64List> dco_decode_list_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_prim_u_64_strict)
        .toList();
  }

  @protected
  List<double> dco_decode_list_prim_f_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<double>;
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  (List<Uint64List>, List<Float32List>)
      dco_decode_record_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_list_prim_u_64_strict(arr[0]),
      dco_decode_list_list_prim_f_32_strict(arr[1]),
    );
  }

  @protected
  (
    Uint64List,
    List<Uint64List>,
    List<Float32List>
  ) dco_decode_record_list_prim_u_64_strict_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_64_strict(arr[0]),
      dco_decode_list_list_prim_u_64_strict(arr[1]),
      dco_decode_list_list_prim_f_32_strict(arr[2]),
    );
  }

  @protected
  (
    Uint64List,
    Float32List
  ) dco_decode_record_list_prim_u_64_strict_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_64_strict(arr[0]),
      dco_decode_list_prim_f_32_strict(arr[1]),
    );
  }

  @protected
  (BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)
      dco_decode_record_usize_usize_usize_usize_usize_usize_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) {
      throw Exception('Expected 7 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_usize(arr[1]),
      dco_decode_usize(arr[2]),
      dco_decode_usize(arr[3]),
      dco_decode_usize(arr[4]),
      dco_decode_usize(arr[5]),
      dco_decode_usize(arr[6]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VectorDb
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VectorDbImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VectorDb
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VectorDbImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VectorDb
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VectorDbImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  List<Float32List> sse_decode_list_list_prim_f_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Float32List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_f_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint64List> sse_decode_list_list_prim_u_64_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <Uint64List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_64_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (List<Uint64List>, List<Float32List>)
      sse_decode_record_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_list_list_prim_u_64_strict(deserializer);
    final var_field1 = sse_decode_list_list_prim_f_32_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    Uint64List,
    List<Uint64List>,
    List<Float32List>
  ) sse_decode_record_list_prim_u_64_strict_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_list_prim_u_64_strict(deserializer);
    final var_field1 = sse_decode_list_list_prim_u_64_strict(deserializer);
    final var_field2 = sse_decode_list_list_prim_f_32_strict(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (Uint64List, Float32List)
      sse_decode_record_list_prim_u_64_strict_list_prim_f_32_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_list_prim_u_64_strict(deserializer);
    final var_field1 = sse_decode_list_prim_f_32_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)
      sse_decode_record_usize_usize_usize_usize_usize_usize_usize(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_usize(deserializer);
    final var_field1 = sse_decode_usize(deserializer);
    final var_field2 = sse_decode_usize(deserializer);
    final var_field3 = sse_decode_usize(deserializer);
    final var_field4 = sse_decode_usize(deserializer);
    final var_field5 = sse_decode_usize(deserializer);
    final var_field6 = sse_decode_usize(deserializer);
    return (
      var_field0,
      var_field1,
      var_field2,
      var_field3,
      var_field4,
      var_field5,
      var_field6
    );
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          VectorDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VectorDbImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          VectorDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VectorDbImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVectorDB(
          VectorDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VectorDbImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_list_list_prim_f_32_strict(
      List<Float32List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_f_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_64_strict(
      List<Uint64List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_64_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_loose(
      List<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(
        self is Float32List ? self : Float32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_record_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
      (List<Uint64List>, List<Float32List>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_list_prim_u_64_strict(self.$1, serializer);
    sse_encode_list_list_prim_f_32_strict(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_list_prim_u_64_strict_list_list_prim_u_64_strict_list_list_prim_f_32_strict(
          (Uint64List, List<Uint64List>, List<Float32List>) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.$1, serializer);
    sse_encode_list_list_prim_u_64_strict(self.$2, serializer);
    sse_encode_list_list_prim_f_32_strict(self.$3, serializer);
  }

  @protected
  void sse_encode_record_list_prim_u_64_strict_list_prim_f_32_strict(
      (Uint64List, Float32List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_64_strict(self.$1, serializer);
    sse_encode_list_prim_f_32_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_usize_usize_usize_usize_usize_usize_usize(
      (BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
    sse_encode_usize(self.$3, serializer);
    sse_encode_usize(self.$4, serializer);
    sse_encode_usize(self.$5, serializer);
    sse_encode_usize(self.$6, serializer);
    sse_encode_usize(self.$7, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class VectorDbImpl extends RustOpaque implements VectorDb {
  // Not to be used by end users
  VectorDbImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VectorDbImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VectorDb,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VectorDb,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VectorDbPtr,
  );

  Future<void> addVector({required BigInt key, required List<double> vector}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbAddVector(
          that: this, key: key, vector: vector);

  Future<void> bulkAddVectors(
          {required Uint64List keys, required List<Float32List> vectors}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbBulkAddVectors(
          that: this, keys: keys, vectors: vectors);

  Future<List<Float32List>> bulkGetVectors({required Uint64List keys}) =>
      RustLib.instance.api
          .crateApiUsearchApiVectorDbBulkGetVectors(that: this, keys: keys);

  Future<BigInt> bulkRemoveVectors({required Uint64List keys}) =>
      RustLib.instance.api
          .crateApiUsearchApiVectorDbBulkRemoveVectors(that: this, keys: keys);

  Future<(Uint64List, List<Uint64List>, List<Float32List>)> bulkSearchKeys(
          {required Uint64List potentialKeys,
          required BigInt count,
          required bool exact}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbBulkSearchKeys(
          that: this, potentialKeys: potentialKeys, count: count, exact: exact);

  Future<(List<Uint64List>, List<Float32List>)> bulkSearchVectors(
          {required List<Float32List> queries,
          required BigInt count,
          required bool exact}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbBulkSearchVectors(
          that: this, queries: queries, count: count, exact: exact);

  /// Check if a vector with the given key exists in the index.
  /// `true` if the index contains the vector with the given key, `false` otherwise.
  Future<bool> containsVector({required BigInt key}) => RustLib.instance.api
      .crateApiUsearchApiVectorDbContainsVector(that: this, key: key);

  Future<void> deleteIndex() =>
      RustLib.instance.api.crateApiUsearchApiVectorDbDeleteIndex(
        that: this,
      );

  Future<(BigInt, BigInt, BigInt, BigInt, BigInt, BigInt, BigInt)>
      getIndexStats() =>
          RustLib.instance.api.crateApiUsearchApiVectorDbGetIndexStats(
            that: this,
          );

  Future<Float32List> getVector({required BigInt key}) => RustLib.instance.api
      .crateApiUsearchApiVectorDbGetVector(that: this, key: key);

  Future<BigInt> removeVector({required BigInt key}) => RustLib.instance.api
      .crateApiUsearchApiVectorDbRemoveVector(that: this, key: key);

  Future<void> resetIndex() =>
      RustLib.instance.api.crateApiUsearchApiVectorDbResetIndex(
        that: this,
      );

  Future<(Uint64List, Float32List)> searchVectors(
          {required List<double> query,
          required BigInt count,
          required bool exact}) =>
      RustLib.instance.api.crateApiUsearchApiVectorDbSearchVectors(
          that: this, query: query, count: count, exact: exact);
}
