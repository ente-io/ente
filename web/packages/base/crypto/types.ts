/**
 * Data provided either as bytes ({@link Uint8Array}) or their base64 string
 * representation.
 */
export type BytesOrB64 = Uint8Array | string;

/**
 * The result of encryption using the secretbox APIs.
 *
 * It contains an encrypted data and a randomly generated nonce that was used
 * during encryption. Both these values are needed to decrypt the data. The
 * nonce does not need to be secret.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 */
export interface EncryptedBox {
    /**
     * The data to decrypt.
     */
    encryptedData: BytesOrB64;
    /**
     * The nonce that was used during encryption.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonce: BytesOrB64;
}

export interface EncryptedBoxB64 {
    /**
     * The encrypted data as a base64 string.
     */
    encryptedData: string;
    /**
     * The nonce that was used during encryption, as a base64 string.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonce: string;
}

/**
 * The result of encryption using the secretstream APIs without chunking.
 *
 * It contains an encrypted data and a header that should be provided during
 * decryption. The header does not need to be secret.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 *
 * This type is a combination of {@link EncryptedBlobBytes} and
 * {@link EncryptedBlobB64} which allows the decryption routines to accept
 * either the bytes or the base64 variants produced by the encryption routines.
 */
export interface EncryptedBlob {
    /**
     * The encrypted data.
     */
    encryptedData: BytesOrB64;
    /**
     * The decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: BytesOrB64;
}

/**
 * A variant of {@link EncryptedBlob} that has the encrypted data and header
 * as bytes ({@link Uint8Array}s).
 */
export interface EncryptedBlobBytes {
    /**
     * The encrypted data.
     */
    encryptedData: Uint8Array;
    /**
     * The decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: Uint8Array;
}

/**
 * A variant of {@link EncryptedBlob} that has the encrypted data and header
 * as base64 strings.
 */
export interface EncryptedBlobB64 {
    /**
     * The encrypted data as a base64 string.
     */
    encryptedData: string;
    /**
     * A base64 string containing the decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: string;
}

/**
 * An intermediate between {@link EncryptedBlobBytes} and
 * {@link EncryptedBlobB64} that has the encrypted as bytes
 * ({@link Uint8Array}s), but the {@link decryptionHeader} as a base64 string.
 *
 * Such a format is handy for encrypting files, since it can then directly be
 * used (the file's encrypted bytes get uploaded separately, whilst the base64
 * decryption header becomes part of the corresponding {@link EnteFile}).
 */
export interface EncryptedFile {
    /**
     * The encrypted data.
     */
    encryptedData: Uint8Array;
    /**
     * A base64 string containing the decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: string;
}
